{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\simbo\\\\Documents\\\\Dosyalar\\\\Programlama Dosyalar\\u0131\\\\React\\\\24-nextjs-project\\\\pages\\\\[meetupId].js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../components/meetups/MeetupDetail';\n\nconst MeetupDetails = function (props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}; //we need to add this function if this component is a dynmic page while using getStaticProps() not serverSideProps or nothing.\n//since pages are are pre-rendered during build process, nextJS renders all possible pages in app, including dynmaic pages. nextJS neeeds which ids it will pregenerate\n\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://user:Tcsg-134USER@cluster0.rwrjf.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //we fetch only id proptery of all meetups\n\n  client.close();\n  return {\n    fallback: false,\n    //fallback key tells nextJS if our pathc contains all possible pages or some of them. false means contains all. if user type unsuported id (in site path) nextJS gives a 404 error.\n    //true means nextJS will try to create a page. we can use this option for most visited pages but not all of them.\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      } //lesson 341\n\n    })) // this is hard coded path\n    // [\n    //   //this function returns a object including an array of paths of every dynamic pages.\n    //   {\n    //     params: {\n    //       //if we have multiple dynamic pages we need multiple keys for each dynmic page\n    //       meetupId: 'm1',\n    //       //\n    //     },\n    //   },\n    //   //for each possible dymic page we need to create an object. not hardcoded ofc.\n    //   {\n    //     params: {\n    //       meetupId: 'm2',\n    //     },\n    //   },\n    // ],\n\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://user:Tcsg-134USER@cluster0.rwrjf.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log(selectedMeetup);\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description,\n        image: selectedMeetup.image\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/simbo/Documents/Dosyalar/Programlama DosyalarÄ±/React/24-nextjs-project/pages/[meetupId].js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","console","log","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,MAAMC,aAAa,GAAG,UAAUC,KAAV,EAAiB;AACrC,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD,C,CAWA;AAEA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,gGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB,CATqC,CAUrC;;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAEL;AACA;AACAC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAK;AAC5BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ,OADoB,CACiB;;AADjB,KAAL,CAAlB,CAJF,CAQL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAxBK,GAAP;AA0BD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,gGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACrDb,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD;AADwC,GAA1B,CAA7B;AAIAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AAEAnB,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV6B,QAAAA,EAAE,EAAEJ,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVpB,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAFZ;AAGVC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAHd;AAIVC,QAAAA,WAAW,EAAEqB,cAAc,CAACrB,WAJlB;AAKVH,QAAAA,KAAK,EAAEwB,cAAc,CAACxB;AALZ;AADP;AADF,GAAP;AAWD;AAED,eAAeH,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\nimport MeetupDetail from '../components/meetups/MeetupDetail';\r\n\r\nconst MeetupDetails = function (props) {\r\n  return (\r\n    <MeetupDetail\r\n      image={props.meetupData.image}\r\n      title={props.meetupData.title}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    />\r\n  );\r\n};\r\n\r\n//we need to add this function if this component is a dynmic page while using getStaticProps() not serverSideProps or nothing.\r\n\r\n//since pages are are pre-rendered during build process, nextJS renders all possible pages in app, including dynmaic pages. nextJS neeeds which ids it will pregenerate\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://user:Tcsg-134USER@cluster0.rwrjf.mongodb.net/meetups?retryWrites=true&w=majority'\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  //we fetch only id proptery of all meetups\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    //fallback key tells nextJS if our pathc contains all possible pages or some of them. false means contains all. if user type unsuported id (in site path) nextJS gives a 404 error.\r\n    //true means nextJS will try to create a page. we can use this option for most visited pages but not all of them.\r\n    paths: meetups.map(meetup => ({\r\n      params: { meetupId: meetup._id.toString() }, //lesson 341\r\n    })),\r\n\r\n    // this is hard coded path\r\n    // [\r\n    //   //this function returns a object including an array of paths of every dynamic pages.\r\n    //   {\r\n    //     params: {\r\n    //       //if we have multiple dynamic pages we need multiple keys for each dynmic page\r\n    //       meetupId: 'm1',\r\n    //       //\r\n    //     },\r\n    //   },\r\n    //   //for each possible dymic page we need to create an object. not hardcoded ofc.\r\n    //   {\r\n    //     params: {\r\n    //       meetupId: 'm2',\r\n    //     },\r\n    //   },\r\n    // ],\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://user:Tcsg-134USER@cluster0.rwrjf.mongodb.net/meetups?retryWrites=true&w=majority'\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({\r\n    _id: ObjectId(meetupId),\r\n  });\r\n\r\n  console.log(selectedMeetup);\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        description: selectedMeetup.description,\r\n        image: selectedMeetup.image,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}