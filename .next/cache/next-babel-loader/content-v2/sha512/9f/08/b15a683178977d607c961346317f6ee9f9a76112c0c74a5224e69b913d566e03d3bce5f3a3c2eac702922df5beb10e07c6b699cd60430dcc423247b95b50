{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\simbo\\\\Documents\\\\Dosyalar\\\\Programlama Dosyalar\\u0131\\\\React\\\\24-nextjs-project\\\\pages\\\\index.js\";\n// import { useEffect, useState } from 'react';\nimport MeetupList from '../components/meetups/MeetupList';\nvar DUMMY_MEETUPS = [{\n  id: 'm1',\n  title: 'A first meetup',\n  image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n  address: 'address 5 istanbul',\n  description: 'first meetup'\n}, {\n  id: 'm2',\n  title: 'second meetup',\n  image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n  address: 'address 5 istanbul',\n  description: 'first meetup'\n}, {\n  id: 'm3',\n  title: 'third meetup',\n  image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n  address: 'address 5 istanbul',\n  description: 'first meetup'\n}];\n\nvar HomePage = function HomePage(props) {\n  //   const [loadedMeetups, setLoadedMeetups] = useState([]);\n  //   useEffect(() => {\n  //     setLoadedMeetups(DUMMY_MEETUPS);\n  //   }, []);\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n}; // //this funtion talks with server and client never sees this. if our site wont be watch very frequently this is the way to go.\n\n\n_c = HomePage;\n//if site updates are very frequent we might want to choose this approach. Since its updated auto by every request we dont need to revalidate by ourselves.\n//this function does not run during build process (unlike getStaticProps), but during deployment on server.\n//code here run on server and wont be exposed to client as getStaticProps.\n// export async function getServerSideProps(context) {\n//     //context parameter gives us extra data as server side props.\n//     const req = context.req; //request\n//     const res = context.res; //respond\n//     //fetch data\n//     return {\n//       props: {\n//         meetups: DUMMY_MEETUPS,\n//       },\n//     };\n//   }\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/simbo/Documents/Dosyalar/Programlama DosyalarÄ±/React/24-nextjs-project/pages/index.js"],"names":["MeetupList","DUMMY_MEETUPS","id","title","image","address","description","HomePage","props","meetups"],"mappings":";;AAAA;AAEA,OAAOA,UAAP,MAAuB,kCAAvB;AAEA,IAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,gBAFT;AAGEC,EAAAA,KAAK,EACH,wHAJJ;AAKEC,EAAAA,OAAO,EAAE,oBALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CADoB,EASpB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,eAFT;AAGEC,EAAAA,KAAK,EACH,wHAJJ;AAKEC,EAAAA,OAAO,EAAE,oBALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CAToB,EAiBpB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,cAFT;AAGEC,EAAAA,KAAK,EACH,wHAJJ;AAKEC,EAAAA,OAAO,EAAE,oBALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CAjBoB,CAAtB;;AA2BA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAUC,KAAV,EAAiB;AAChC;AAEA;AACA;AACA;AAEA,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CARD,C,CAUA;;;KAVMF,Q;AAsCN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,QAAf","sourcesContent":["// import { useEffect, useState } from 'react';\r\nimport { MongoClient } from 'mongodb';\r\nimport MeetupList from '../components/meetups/MeetupList';\r\n\r\nconst DUMMY_MEETUPS = [\r\n  {\r\n    id: 'm1',\r\n    title: 'A first meetup',\r\n    image:\r\n      'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\r\n    address: 'address 5 istanbul',\r\n    description: 'first meetup',\r\n  },\r\n  {\r\n    id: 'm2',\r\n    title: 'second meetup',\r\n    image:\r\n      'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\r\n    address: 'address 5 istanbul',\r\n    description: 'first meetup',\r\n  },\r\n  {\r\n    id: 'm3',\r\n    title: 'third meetup',\r\n    image:\r\n      'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\r\n    address: 'address 5 istanbul',\r\n    description: 'first meetup',\r\n  },\r\n];\r\n\r\nconst HomePage = function (props) {\r\n  //   const [loadedMeetups, setLoadedMeetups] = useState([]);\r\n\r\n  //   useEffect(() => {\r\n  //     setLoadedMeetups(DUMMY_MEETUPS);\r\n  //   }, []);\r\n\r\n  return <MeetupList meetups={props.meetups} />;\r\n};\r\n\r\n// //this funtion talks with server and client never sees this. if our site wont be watch very frequently this is the way to go.\r\nexport async function getStaticProps() {\r\n  //fetch data\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://user:Tcsg-134USER@cluster0.rwrjf.mongodb.net/meetups?retryWrites=true&w=majority'\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n\r\n  const meetups = await meetupsCollection.find().toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetups: meetups.map(meetup => ({\r\n        title: meetup.title,\r\n        address: meetup.address,\r\n        image: meetup.image,\r\n      })),\r\n    },\r\n    revalidate: 10, //we can change this in seconds. 3600 is an hour.\r\n    //10 seconds to wait to renegerate incaming request, to update pre-rendered page with never data. it will run every 10secons if there is a request so data is never older than 10 seconds.\r\n  };\r\n}\r\n\r\n//if site updates are very frequent we might want to choose this approach. Since its updated auto by every request we dont need to revalidate by ourselves.\r\n//this function does not run during build process (unlike getStaticProps), but during deployment on server.\r\n//code here run on server and wont be exposed to client as getStaticProps.\r\n// export async function getServerSideProps(context) {\r\n//     //context parameter gives us extra data as server side props.\r\n//     const req = context.req; //request\r\n//     const res = context.res; //respond\r\n//     //fetch data\r\n//     return {\r\n//       props: {\r\n//         meetups: DUMMY_MEETUPS,\r\n//       },\r\n//     };\r\n//   }\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}