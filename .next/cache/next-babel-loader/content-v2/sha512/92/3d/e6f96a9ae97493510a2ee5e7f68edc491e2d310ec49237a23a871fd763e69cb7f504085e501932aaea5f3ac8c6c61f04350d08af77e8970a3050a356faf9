{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\simbo\\\\Documents\\\\Dosyalar\\\\Programlama Dosyalar\\u0131\\\\React\\\\24-nextjs-project\\\\pages\\\\[meetupId].js\";\nimport { Fragment } from 'react';\nimport Head from 'next/dist/next-server/lib/head';\nimport MeetupDetail from '../components/meetups/MeetupDetail';\n\nvar MeetupDetails = function MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}; //we need to add this function if this component is a dynmic page while using getStaticProps() not serverSideProps or nothing.\n//since pages are are pre-rendered during build process, nextJS renders all possible pages in app, including dynmaic pages. nextJS neeeds which ids it will pregenerate\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["C:/Users/simbo/Documents/Dosyalar/Programlama DosyalarÄ±/React/24-nextjs-project/pages/[meetupId].js"],"names":["Fragment","Head","MeetupDetail","MeetupDetails","props","meetupData","title","description","image","address"],"mappings":";;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,gCAAjB;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAUC,KAAV,EAAiB;AACrC,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBE;AAAnD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAD1B;AAEE,MAAA,KAAK,EAAEJ,KAAK,CAACC,UAAN,CAAiBC,KAF1B;AAGE,MAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBI,OAH5B;AAIE,MAAA,WAAW,EAAEL,KAAK,CAACC,UAAN,CAAiBE;AAJhC;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAfD,C,CAiBA;AAEA;;;KAnBMJ,a;;AA8FN,eAAeA,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\nimport { Fragment } from 'react';\r\nimport Head from 'next/dist/next-server/lib/head';\r\nimport MeetupDetail from '../components/meetups/MeetupDetail';\r\n\r\nconst MeetupDetails = function (props) {\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{props.meetupData.title}</title>\r\n        <meta name=\"description\" content={props.meetupData.description} />\r\n      </Head>\r\n      <MeetupDetail\r\n        image={props.meetupData.image}\r\n        title={props.meetupData.title}\r\n        address={props.meetupData.address}\r\n        description={props.meetupData.description}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\n//we need to add this function if this component is a dynmic page while using getStaticProps() not serverSideProps or nothing.\r\n\r\n//since pages are are pre-rendered during build process, nextJS renders all possible pages in app, including dynmaic pages. nextJS neeeds which ids it will pregenerate\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://user:Tcsg-134USER@cluster0.rwrjf.mongodb.net/meetups?retryWrites=true&w=majority'\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  //we fetch only id proptery of all meetups\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    //fallback key tells nextJS if our pathc contains all possible pages or some of them. false means contains all. if user type unsuported id (in site path) nextJS gives a 404 error.\r\n    //true means nextJS will try to create a page. we can use this option for most visited pages but not all of them.\r\n    paths: meetups.map(meetup => ({\r\n      params: { meetupId: meetup._id.toString() }, //lesson 341\r\n    })),\r\n\r\n    // this is hard coded path\r\n    // [\r\n    //   //this function returns a object including an array of paths of every dynamic pages.\r\n    //   {\r\n    //     params: {\r\n    //       //if we have multiple dynamic pages we need multiple keys for each dynmic page\r\n    //       meetupId: 'm1',\r\n    //       //\r\n    //     },\r\n    //   },\r\n    //   //for each possible dymic page we need to create an object. not hardcoded ofc.\r\n    //   {\r\n    //     params: {\r\n    //       meetupId: 'm2',\r\n    //     },\r\n    //   },\r\n    // ],\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://user:Tcsg-134USER@cluster0.rwrjf.mongodb.net/meetups?retryWrites=true&w=majority'\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({\r\n    _id: ObjectId(meetupId),\r\n  });\r\n\r\n  console.log(selectedMeetup);\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        description: selectedMeetup.description,\r\n        image: selectedMeetup.image,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}