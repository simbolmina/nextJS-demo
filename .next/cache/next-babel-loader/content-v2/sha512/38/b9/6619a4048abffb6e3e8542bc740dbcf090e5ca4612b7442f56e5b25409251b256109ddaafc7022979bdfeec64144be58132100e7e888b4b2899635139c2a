{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\simbo\\\\Documents\\\\Dosyalar\\\\Programlama Dosyalar\\u0131\\\\React\\\\24-nextjs-project\\\\pages\\\\[meetupId].js\";\nimport { MongoClient } from 'mongodb';\nimport MeetupDetail from '../components/meetups/MeetupDetail';\n\nconst MeetupDetails = function () {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n    title: \"First Meetup\",\n    address: \"Some Street 5, Some City\",\n    description: \"This is a first meetup on meetupdetails\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}; //we need to add this function if this component is a dynmic page while using getStaticProps() not serverSideProps or nothing.\n//since pages are are pre-rendered during build process, nextJS renders all possible pages in app, including dynmaic pages. nextJS neeeds which ids it will pregenerate\n\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://user:Tcsg-134USER@cluster0.rwrjf.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //we fetch only id proptery of all meetups\n\n  return {\n    fallback: false,\n    //fallback key tells nextJS if our pathc contains all possible pages or some of them. false means contains all. if user type unsuported id (in site path) nextJS gives a 404 error.\n    //true means nextJS will try to create a page. we can use this option for most visited pages but not all of them.\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) // [\n    //   //this function returns a object including an array of paths of every dynamic pages.\n    //   {\n    //     params: {\n    //       //if we have multiple dynamic pages we need multiple keys for each dynmic page\n    //       meetupId: 'm1',\n    //       //\n    //     },\n    //   },\n    //   //for each possible dymic page we need to create an object. not hardcoded ofc.\n    //   {\n    //     params: {\n    //       meetupId: 'm2',\n    //     },\n    //   },\n    // ],\n\n  };\n}\nexport async function getStaticProps(context) {\n  //fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\n        id: meetupId,\n        title: 'First Meetup',\n        address: 'Some Street 5, Some City',\n        description: 'This is a first meetup on getStaticProps'\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/simbo/Documents/Dosyalar/Programlama DosyalarÄ±/React/24-nextjs-project/pages/[meetupId].js"],"names":["MongoClient","MeetupDetail","MeetupDetails","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","console","log","props","meetupData","image","id","title","address","description"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,MAAMC,aAAa,GAAG,YAAY;AAChC,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,wHADR;AAEE,IAAA,KAAK,EAAC,cAFR;AAGE,IAAA,OAAO,EAAC,0BAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD,C,CAWA;AAEA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CACnB,gGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB,CATqC,CAUrC;;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAEL;AACA;AACAC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAYC,MAAM,KAAK;AAC5BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAZ;AADoB,KAAL,CAAlB,CAJF,CAQL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvBK,GAAP;AAyBD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEA,SAAO;AACLM,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EACH,wHAFQ;AAGVC,QAAAA,EAAE,EAAET,QAHM;AAIVU,QAAAA,KAAK,EAAE,cAJG;AAKVC,QAAAA,OAAO,EAAE,0BALC;AAMVC,QAAAA,WAAW,EAAE;AANH;AADP;AADF,GAAP;AAYD;AAED,eAAe5B,aAAf","sourcesContent":["import { MongoClient } from 'mongodb';\r\nimport MeetupDetail from '../components/meetups/MeetupDetail';\r\n\r\nconst MeetupDetails = function () {\r\n  return (\r\n    <MeetupDetail\r\n      image=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\"\r\n      title=\"First Meetup\"\r\n      address=\"Some Street 5, Some City\"\r\n      description=\"This is a first meetup on meetupdetails\"\r\n    />\r\n  );\r\n};\r\n\r\n//we need to add this function if this component is a dynmic page while using getStaticProps() not serverSideProps or nothing.\r\n\r\n//since pages are are pre-rendered during build process, nextJS renders all possible pages in app, including dynmaic pages. nextJS neeeds which ids it will pregenerate\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://user:Tcsg-134USER@cluster0.rwrjf.mongodb.net/meetups?retryWrites=true&w=majority'\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  //we fetch only id proptery of all meetups\r\n\r\n  return {\r\n    fallback: false,\r\n    //fallback key tells nextJS if our pathc contains all possible pages or some of them. false means contains all. if user type unsuported id (in site path) nextJS gives a 404 error.\r\n    //true means nextJS will try to create a page. we can use this option for most visited pages but not all of them.\r\n    paths: meetups.map(meetup => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n\r\n    // [\r\n    //   //this function returns a object including an array of paths of every dynamic pages.\r\n    //   {\r\n    //     params: {\r\n    //       //if we have multiple dynamic pages we need multiple keys for each dynmic page\r\n    //       meetupId: 'm1',\r\n    //       //\r\n    //     },\r\n    //   },\r\n    //   //for each possible dymic page we need to create an object. not hardcoded ofc.\r\n    //   {\r\n    //     params: {\r\n    //       meetupId: 'm2',\r\n    //     },\r\n    //   },\r\n    // ],\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  //fetch data for a single meetup\r\n  const meetupId = context.params.meetupId;\r\n\r\n  console.log(meetupId);\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        image:\r\n          'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg',\r\n        id: meetupId,\r\n        title: 'First Meetup',\r\n        address: 'Some Street 5, Some City',\r\n        description: 'This is a first meetup on getStaticProps',\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}